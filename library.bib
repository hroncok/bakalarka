Automatically generated by Mendeley 1.8.4
Any changes to this file will be lost if it is regenerated by Mendeley.

@misc{rfc3986,
abstract = {A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.},
author = {Berners-Lee, Tim and Fielding, Roy and Masinter, Larry},
booktitle = {Technical report httptoolsietforghtmlrfc3986},
institution = {IETF (Internet Engineering Task Force)},
pages = {1--62},
publisher = {IETF, Network Working Group},
title = {{RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax}},
url = {http://tools.ietf.org/html/rfc3986},
year = {2005}
}
@misc{rfc4287,
abstract = {Atom is an XML-based document format that describes lists of related information known as "feeds". Feeds are composed of a number of items, known as "entries", each with an extensible set of attached metadata. For example, each entry has a title. The primary use case that Atom addresses is the syndication of Web content such as weblogs and news headlines to Web sites as well as directly to user agents.},
author = {Nottingham, Mark and Sayre, Robert},
pages = {1--43},
publisher = {IETF, Network Working Group},
title = {{The Atom Syndication Format}},
url = {http://tools.ietf.org/html/rfc4287},
year = {2005}
}
@misc{wiki-stud-program,
author = {{Přisp\v{e}vatel\'{e} Wikipedie}},
booktitle = {Wikipedie: Otevřen\'{a} encyklopedie.},
file = {:Users/jimmy/Research/Studijn\'{\i} program - Přisp\v{e}vatel\'{e} Wikipedie - Unknown.html:html},
publisher = {Wikimedia Foundation},
title = {{Studijn\'{\i} program}},
url = {http://cs.wikipedia.org/wiki/Studijn\'{\i}\_program},
urldate = {2013-05-07}
}
@misc{wiki-semestr,
author = {{Přisp\v{e}vatel\'{e} Wikipedie}},
booktitle = {Wikipedie: Otevřen\'{a} encyklopedie.},
file = {:Users/jimmy/Research/Semestr - Přisp\v{e}vatel\'{e} Wikipedie - Unknown.html:html},
publisher = {Wikimedia Foundation},
title = {{Semestr}},
url = {http://cs.wikipedia.org/wiki/Semestr},
urldate = {2013-05-07}
}
@misc{odata-v3,
file = {:Users/jimmy/Research/OData V3 Protocol Specification - Unknown - 2013.pdf:pdf},
pages = {1--315},
publisher = {Microsoft Corporation},
title = {{OData V3 Protocol Specification}},
url = {http://www.odata.org/},
year = {2013}
}
@misc{bk-fit,
author = {Hala\v{s}ka, Ivan and Nov\'{a}k, J.},
title = {{Studijn\'{\i} pl\'{a}ny fakulty}},
url = {https://bk.fit.cvut.cz/cz/plany/pl30000327.html},
urldate = {2013-05-08},
year = {2013}
}
@book{burke2010,
abstract = {Learn how to design and develop distributed web services in Java using RESTful architectural principals and the JAX-RS specification in Java EE 6. With this hands-on reference, you'll focus on implementation rather than theory, and discover why the RESTful method is far better than technologies like CORBA and SOAP. It's easy to get started with services based on the REST architecture. RESTful Java with JAX-RS includes a technical guide that explains REST and JAX-RS, how they work, and when to use them. With the RESTEasy workbook that follows, you get step-by-step instructions for installing, configuring, and running several working JAX-RS examples using the JBoss RESTEasy implementation of JAX-RS. Work on the design of a distributed RESTful interface, and develop it in Java as a JAX-RS service Dispatch HTTP requests in JAX-RS, and learn how to extract information from them Deploy your web services within Java Enterprise Edition using the Application class, Default Component Model, EJB Integration, Spring Integration, and JPA Discover several options for securing your web services Learn how to implement RESTful design patterns using JAX-RS Write RESTful clients in Java using libraries and frameworks such as java.net.URL, Apache HTTP Client, and RESTEasy Proxy},
author = {Burke, Bill},
file = {:Users/jimmy/Research/RESTful Java with JAX-RS - Burke - 2010.pdf:pdf},
isbn = {9780596158040},
keywords = {JAX-RS,Java,REST},
mendeley-tags = {JAX-RS,Java,REST},
pages = {314},
publisher = {O'Reilly Media, Inc.},
title = {{RESTful Java with JAX-RS}},
year = {2010}
}
@misc{gdata-reference,
author = {Google},
file = {:Users/jimmy/Research/Google Data APIs – Protocol Reference - Google - 2012.html:html},
keywords = {Google,REST},
mendeley-tags = {Google,REST},
title = {{Google Data APIs – Protocol Reference}},
url = {https://developers.google.com/gdata/docs/2.0/reference},
urldate = {2013-04-29},
year = {2012}
}
@book{fredrich2012,
author = {Fredrich, Todd},
file = {:Users/jimmy/Research/RESTful Service Best Practices Recommendations for Creating Web Services - Fredrich - 2012.pdf:pdf},
keywords = {REST},
mendeley-tags = {REST},
pages = {1--34},
title = {{RESTful Service Best Practices Recommendations for Creating Web Services}},
url = {http://www.restapitutorial.com/},
year = {2012}
}
@misc{lupu2007,
author = {Lupu, Eyal},
booktitle = {Eyal Lupu Java Blog},
file = {:Users/jimmy/Research/Hibernate CompositeUserType and Annotations - Lupu - 2007.html:html},
title = {{Hibernate CompositeUserType and Annotations}},
url = {http://www.jroller.com/eyallupu/entry/hibernate\_compositeusertype\_and\_annotations},
urldate = {2013-05-09},
year = {2007}
}
@misc{rfc6902,
abstract = {JSON Patch defines a JSON document structure for expressing a sequence of operations to apply to a JavaScript Object Notation (JSON) document; it is suitable for use with the HTTP PATCH method. The "application/json-patch+json" media type is used to identify such patch documents.},
author = {Nottingham, Mark and Bryan, Paul},
file = {:Users/jimmy/Research/JavaScript Object Notation (JSON) Patch - Nottingham, Bryan - 2013.html:html},
pages = {1--18},
publisher = {IETF},
title = {{JavaScript Object Notation (JSON) Patch}},
url = {http://tools.ietf.org/html/rfc6902},
year = {2013}
}
@misc{duvander2011,
author = {DuVander, Adam},
booktitle = {Programmable web},
file = {:Users/jimmy/Research/1 in 5 APIs Say “Bye XML” - DuVander - 2011.html:html},
keywords = {api,apis,mashups,web 2.0,web services},
title = {{1 in 5 APIs Say “Bye XML”}},
url = {http://blog.programmableweb.com/2011/05/25/1-in-5-apis-say-bye-xml/},
urldate = {2013-05-09},
year = {2011}
}
@misc{json-schema-draft,
abstract = {JSON Schema defines the media type "application/schema+json", a JSON based format for defining the structure of JSON data. JSON Schema provides a contract for what JSON data is required for a given application and how to interact with it. JSON Schema is intended to define validation, documentation, hyperlink navigation, and interaction control of JSON data.},
author = {Court, Gary and Zyp, Kris and Galiegue, Francis},
file = {:Users/jimmy/Research/JSON Schema core definitions and terminology - Court, Zyp, Galiegue - 2013.html:html},
pages = {1--14},
publisher = {IETF},
title = {{JSON Schema: core definitions and terminology}},
url = {http://tools.ietf.org/html/draft-zyp-json-schema-04},
year = {2013}
}
@misc{duvander2012,
author = {DuVander, Adam},
booktitle = {Programmable web},
file = {:Users/jimmy/Research/Leading APIs Say “Bye XML” in New Versions - DuVander - 2012.html:html},
keywords = {api,apis,mashups,web 2.0,web services},
title = {{Leading APIs Say “Bye XML” in New Versions}},
url = {http://blog.programmableweb.com/2012/12/17/leading-apis-say-bye-xml-in-new-versions/},
urldate = {2013-05-09},
year = {2012}
}
@book{apigee-api-design,
author = {Mulloy, Brian},
file = {:Users/jimmy/Research/Web API Design – Crafting Interfaces that Developers Love - Mulloy - 2012.pdf:pdf},
keywords = {REST},
mendeley-tags = {REST},
pages = {36},
publisher = {Apigee},
title = {{Web API Design – Crafting Interfaces that Developers Love}},
url = {http://apigee.com/about/content/web-api-design},
year = {2012}
}
@misc{rfc2616,
abstract = {The Hypertext Transfer Protocol (HTTP) is an application-level protocol for distributed, collaborative, hypermedia information systems. It is a generic, stateless, protocol which can be used for many tasks beyond its use for hypertext, such as name servers and distributed object management systems, through extension of its request methods, error codes and headers 47. A feature of HTTP is the typing and negotiation of data representation, allowing systems to be built independently of the data being transferred. HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as HTTP/1.1, and is an update to RFC 2068 33.},
author = {Fielding, Roy Thomas and Gettys, Jim and Mogul, Jeff and Frystyk, Henrik and Masinter, Larry and Leach, Paul and Berners-Lee, Tim},
booktitle = {Society},
institution = {Internet Engineering Task Force},
issn = {20701721},
number = {2616},
pages = {1--114},
publisher = {IETF, Network Working Group},
series = {Request for Comments},
title = {{Hypertext Transfer Protocol -- HTTP/1.1}},
url = {http://www.ietf.org/rfc/rfc2616.txt},
year = {1999}
}
@misc{rsql-parser,
author = {Jirůtka, Jakub},
title = {{RSQL / FIQL parser}},
url = {https://github.com/jirutka/rsql-parser},
year = {2013}
}
@phdthesis{jirutka2010,
abstract = {This bachelor thesis deals with analysis, design and especially implementation of an application interface, which provides access to data in school information system KOS. This data derives through a database export in XML format, which batch loads at set intervals into its own database. The application interface is implemented as a REST-based Web Service. The resulting system is based on Java Enterprise Edition and uses frameworks Spring, Hibernate/JPA and Jersey/JAX-RS.},
author = {Jirůtka, Jakub},
file = {:Users/jimmy/Research/KOS API jako webov\'{a} slu\v{z}ba - Jirůtka - 2010.pdf:pdf},
keywords = {API,CTU,KOS,REST},
pages = {1--67},
school = {CTU in Prague, Faculty of Electrical Engineering},
title = {{KOS API jako webov\'{a} slu\v{z}ba}},
type = {Bachelor thesis},
url = {https://dip.felk.cvut.cz/browse/pdfcache/jirutjak\_2010bach.pdf},
year = {2010}
}
@book{apigee-facade,
author = {Mulloy, Brian},
file = {:Users/jimmy/Research/API Fa\c{c}ade Pattern - A Simple Interface to a Complex System - Mulloy - 2012.pdf:pdf},
keywords = {REST},
mendeley-tags = {REST},
pages = {35},
publisher = {Apigee},
title = {{API Fa\c{c}ade Pattern - A Simple Interface to a Complex System}},
url = {http://apigee.com/about/content/api-facade-pattern},
year = {2012}
}
@misc{rsql-hibernate,
author = {Jirůtka, Jakub},
title = {{RSQL Hibernate}},
url = {https://github.com/jirutka/rsql-hibernate},
year = {2013}
}
@misc{kos1998,
address = {Kladno},
author = {Tůmov\'{a}, Mark\'{e}ta},
file = {:Users/jimmy/Research/Komponenta STUDIUM – Pracovn\'{\i} postup k rozvrhu - Tůmov\'{a} - 1998.pdf:pdf},
pages = {1--53},
publisher = {Tril s r. o.},
title = {{Komponenta STUDIUM – Pracovn\'{\i} postup k rozvrhu}},
year = {1998}
}
@misc{rfc6570,
abstract = {A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.},
author = {Nottingham, Mark and Hadley, Marc and Gregorio, Joe and Orchard, David and Fielding, Roy T.},
file = {:Users/jimmy/Research/URI Template - Nottingham et al. - 2012.html:html},
pages = {1--34},
publisher = {IETF},
title = {{URI Template}},
url = {http://tools.ietf.org/html/rfc6570},
year = {2012}
}
@misc{opensearch,
author = {Clinton, DeWitt and Tesler, Joel and Fagan, Michael and Gregorio, Joe and Sauve, Aaron and Snell, James},
file = {:Users/jimmy/Research/OpenSearch 1.1, Draft 5 - Clinton et al. - Unknown.html:html},
title = {{OpenSearch 1.1, Draft 5}},
url = {http://www.opensearch.org/Specifications/OpenSearch/1.1},
urldate = {2013-05-08}
}
@misc{lee-resource,
author = {Berners-Lee, Tim},
booktitle = {Design Issues for the World Wide Web},
file = {:Users/jimmy/Research/A Short History of “Resource” - Berners-Lee - 2002.html:html},
keywords = {REST,web},
mendeley-tags = {REST,web},
title = {{A Short History of “Resource”}},
url = {http://www.w3.org/DesignIssues/TermResource.html},
urldate = {2013-04-29},
year = {2002}
}
@book{masse2011,
author = {Masse, Mark},
file = {:Users/jimmy/Research/REST API Design Rulebook - Masse - 2011.pdf:pdf;:Users/jimmy/Research/REST API Design Rulebook - Masse - 2011.epub:epub},
isbn = {9781449310509},
keywords = {REST},
mendeley-tags = {REST},
pages = {1--94},
publisher = {O'Reilly Media, Inc.},
title = {{REST API Design Rulebook}},
year = {2011}
}
@misc{kosapi-doc,
author = {Jirůtka, Jakub},
pages = {71},
title = {{Dokumentace KOSapi}},
url = {https://kosapi.fit.cvut.cz},
urldate = {2013-05-08},
year = {2013}
}
@misc{rfc2324,
abstract = {This document describes HTCPCP, a protocol for controlling, monitoring, and diagnosing coffee pots.},
author = {Masinter, Larry},
file = {:Users/jimmy/Research/Hyper Text Coffee Pot Control Protocol (HTCPCP1.0) - Masinter - 1998.html:html},
pages = {1--10},
publisher = {IETF},
title = {{Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)}},
url = {http://tools.ietf.org/html/rfc2324},
year = {1998}
}
@misc{snell2004,
author = {Snell, James},
booktitle = {IBM DeveloperWorks},
file = {:Users/jimmy/Research/Resource-oriented vs. activity-oriented Web services - Snell - 2004.html:html},
keywords = {REST,SOAP,architecture},
language = {en},
mendeley-tags = {REST,SOAP,architecture},
month = oct,
title = {{Resource-oriented vs. activity-oriented Web services}},
url = {http://www.ibm.com/developerworks/webservices/library/ws-restvsoap/},
urldate = {2013-04-30},
year = {2004}
}
@phdthesis{fielding2000,
abstract = {The World Wide Web has succeeded in large part because its software architecture has been designed to meet the needs of an Internet-scale distributed hypermedia system. The Web has been iteratively developed over the past ten years through a series of modifications to the standards that define its architecture. In order to identify those aspects of the Web that needed improvement and avoid undesirable modifications, a model for the modern Web architecture was needed to guide its design, definition, and deployment. Software architecture research investigates methods for determining how best to partition a system, how components identify and communicate with each other, how information is communicated, how elements of a system can evolve independently, and how all of the above can be described using formal and informal notations. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. An architectural style is a named, coordinated set of architectural constraints. This dissertation defines a framework for understanding software architecture via architectural styles and demonstrates how styles can be used to guide the architectural design of network-based application software. A survey of architectural styles for network-based applications is used to classify styles according to the architectural properties they induce on an architecture for distributed hypermedia. I then introduce the Representational State Transfer (REST) architectural style and describe how REST has been used to guide the design and development of the architecture for the modern Web. REST emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. I describe the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, contrasting them to the constraints of other architectural styles. Finally, I describe the lessons learned from applying REST to the design of the Hypertext Transfer Protocol and Uniform Resource Identifier standards, and from their subsequent deployment in Web client and server software.},
author = {Fielding, Roy Thomas},
booktitle = {Building},
doi = {10.1.1.91.2433},
editor = {Taylor, Richard N},
file = {:Users/jimmy/Research/Architectural Styles and the Design of Network-based Software Architectures - Fielding - 2000.pdf:pdf},
isbn = {0599871180},
number = {2},
pages = {162},
publisher = {Citeseer},
school = {University of California, Irvine},
series = {PhD Dissertation. Dept. of Information and Computer Science},
title = {{Architectural Styles and the Design of Network-based Software Architectures}},
url = {http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm},
volume = {54},
year = {2000}
}
@misc{atompub-fiql,
abstract = {The Feed Item Query Language is a simple but flexible, URI-friendly syntax for expressing filters across the entries in a Web feed. It also specifies a mechanism to allow feeds to indicate what types of queries are supported.},
author = {Nottingham, Mark},
file = {:Users/jimmy/Research/FIQL The Feed Item Query Language - Nottingham - 2007.html:html},
pages = {1--16},
publisher = {IETF, Network Working Group},
title = {{FIQL: The Feed Item Query Language}},
url = {http://tools.ietf.org/id/draft-nottingham-atompub-fiql-00.txt},
year = {2007}
}
@misc{Muhl2012,
author = {Muhl, John},
keywords = {ci,test},
mendeley-tags = {ci,test},
month = jan,
title = {{How to enable Travis CI for an extension}},
url = {http://radiantcms.org/blog/archives/2012/01/06/how-to-enable-travis-ci-for-an-extension/},
urldate = {2012-04-10},
year = {2012}
}
@misc{Lamontagne2007,
author = {Lamontagne, Fran\c{c}ois},
booktitle = {Ruby Fleebie},
file = {::},
title = {{Ruby is dynamically AND strongly typed}},
url = {http://www.rubyfleebie.com/ruby-is-dynamically-and-strongly-typed/},
urldate = {15/05/12},
year = {2007}
}
@book{Fulton2009,
address = {Brno},
author = {Fulton, Hal},
edition = {Vyd. 1.},
isbn = {9788074130182},
keywords = {ruby},
mendeley-tags = {ruby},
publisher = {Zoner Press},
title = {{Ruby: Kompendium znalost\'{\i} pro za\v{c}\'{a}te\v{c}n\'{\i}ky i profesion\'{a}ly}},
translator = {Koutn\'{y}, Jiř\'{\i}},
year = {2009}
}
@book{Hartl2011,
address = {Upper Saddle River NJ ; London},
author = {Hartl, Michael},
isbn = {9780132492546},
keywords = {rails,ruby},
mendeley-tags = {rails,ruby},
publisher = {Addison-Wesley},
title = {{Ruby on Rails 3 Tutorial}},
year = {2011}
}
@book{Fowler2003,
abstract = {The practice of enterprise application development has benefited from the emergence of many new enabling technologies. Multi-tiered object-oriented platforms, such as Java and .NET, have become commonplace. These new tools and technologies are capable of building powerful applications, but they are not easily implemented. Common failures in enterprise applications often occur because their developers do not understand the architectural lessons that experienced object developers have learned. "Patterns of Enterprise Application Architecture" is written in direct response to the stiff challenges that face enterprise application developers. The author, noted object-oriented designer Martin Fowler, noticed that despite changes in technology--from Smalltalk to CORBA to Java to .NET--the same basic design ideas can be adapted and applied to solve common problems. With the help of an expert group of contributors, Martin distills over forty recurring solutions into patterns. The result is an indispensable handbook of solutions that are applicable to any enterprise application platform.  This book is actually two books in one. The first section is a short tutorial on developing enterprise applications, which you can read from start to finish to understand the scope of the book's lessons. The next section, the bulk of the book, is a detailed reference to the patterns themselves. Each pattern provides usage and implementation information, as well as detailed code examples in Java or C\#. The entire book is also richly illustrated with UML diagrams to further explain the concepts.  Armed with this book, you will have the knowledge necessary to make important architectural decisions about building an enterprise application and the proven patterns for use when building them.  The topics covered include: Dividing an enterprise application into layersThe major approaches to organizing business logicAn in-depth treatment of mapping between objects and relational databasesUsing Model-View-Controller to organize a Web presentationHandling concurrency for data that spans multiple transactionsDesigning distributed object interfaces  0321127420B10152002},
author = {Fowler, Martin},
isbn = {0321127420},
keywords = {orm},
mendeley-tags = {orm},
pages = {533},
publisher = {Addison-Wesley Professional},
title = {{Patterns of Enterprise Application Architecture}},
url = {http://books.google.com/books?id=FyWZt5DdvFkC\&pgis=1},
year = {2003}
}
@misc{Hansson2006,
address = {London, England},
annote = {FOWA 2006, London},
author = {Hansson, David Heinemeier},
file = {::},
keywords = {rails,ruby},
mendeley-tags = {rails,ruby},
publisher = {FOWA},
title = {{Happy Programming with Ruby on Rails}},
url = {http://media.rubyonrails.org/presentations/programminghappiness.pdf},
year = {2006}
}
@misc{why2008,
abstract = {At my local Barnes and Noble, there is a huge wall of Java books just waiting to tip over and crush me one day. And one day it will. At the rate things are going, one day that bookcase will be tall enough to crush us all. It might even loop the world several times, crushing previous editions of the same Java books over and over again. This is just a small Ruby book. It won’t crush you. It’s light as a feather (because I haven’t finished it yet—hehe). And there’s a reason this book will stay light: because Ruby is simple to learn.},
author = {why the lucky Stiff},
file = {::},
isbn = {B00262VWT8},
keywords = {ruby},
mendeley-tags = {ruby},
title = {{why's (Poignant) Guide to Ruby}},
url = {http://mislav.uniqpath.com/poignant-guide/},
year = {2008}
}
@misc{Passenger32,
author = {Lai, Hongli},
booktitle = {Phusion Corporate Blog},
file = {::},
keywords = {ruby},
mendeley-tags = {ruby},
title = {{A sneak preview of Phusion Passenger 3.2}},
url = {http://blog.phusion.nl/2012/04/13/a-sneak-preview-of-phusion-passenger-3-2/},
urldate = {16/05/12},
year = {2012}
}
@misc{Grimm2012,
abstract = {Objects on Rails is a "developer's notebook" documenting some guidelines, techniques, and ideas for applying classic object-oriented thought to Ruby on Rails applications. This book is aimed at the working Rails developer who is looking to grow and evolve Rails projects while keeping them flexible, maintainable, and robust. The focus is on pragmatic solutions which tread a "middle way" between the expedience of the Rails "golden path", and rigid OO purity.},
author = {Grimm, Avdi},
file = {::},
keywords = {oop,rails,ruby},
mendeley-tags = {oop,rails,ruby},
title = {{Objects on Rails}},
url = {http://objectsonrails.com/},
year = {2012}
}
@misc{McAlpin2011,
author = {McAlpin, Lawrence},
keywords = {rails,ruby},
mendeley-tags = {rails,ruby},
month = may,
title = {{Overriding Rails validations metaprogramatically}},
url = {http://www.lmcalpin.com/post/5219540409/overriding-rails-validations-metaprogramatically},
year = {2011}
}
@misc{FowlerXunit,
annote = {
        

      },
author = {Fowler, Martin},
file = {::},
keywords = {tdd,testing},
mendeley-tags = {tdd},
title = {{Xunit}},
url = {http://www.martinfowler.com/bliki/Xunit.html},
urldate = {11/05/12}
}
@misc{WikiWiki,
author = {{Přisp\v{e}vatel\'{e} Wikipedie}},
booktitle = {Wikipedie: Otevřen\'{a} encyklopedie.},
keywords = {wiki},
mendeley-tags = {wiki},
publisher = {Wikimedia Foundation},
title = {{Wiki}},
url = {http://cs.wikipedia.org/w/index.php?title=Wiki\&oldid=8421194},
urldate = {14/05/12},
year = {2012}
}
@book{Rappin2011,
address = {Raleigh N.C.},
author = {Rappin, Noel},
isbn = {9781934356647},
keywords = {rails,tdd},
mendeley-tags = {rails,tdd},
pages = {350},
publisher = {Pragmatic Bookshelf},
title = {{Rails Test Prescriptions}},
year = {2011}
}
@misc{WikiUnixLike,
author = {{Přisp\v{e}vatel\'{e} Wikipedie}},
language = {en},
publisher = {Wikimedia Foundation},
title = {{Unix-like}},
url = {http://en.wikipedia.org/w/index.php?title=Unix-like\&oldid=486367194},
urldate = {17/05/12},
year = {2012}
}
@misc{Krzywda2011,
abstract = {Everyone promotes Rails as a MVC framework. I did that as well. However, the truth is that Rails represents the Model2 architecture. It's not MVC.},
author = {Krzywda, Andrzej},
keywords = {mvc,rails},
mendeley-tags = {mvc,rails},
month = sep,
shorttitle = {krzywda11},
title = {{Rails is not MVC}},
url = {http://andrzejonsoftware.blogspot.com/2011/09/rails-is-not-mvc.html},
urldate = {2012-03-17},
year = {2011}
}
@misc{REEEOL,
author = {Lai, Hongli},
booktitle = {Phusion Corporate Blog},
file = {::},
keywords = {Ruby Enterprise Edition,mri,ree,ruby},
mendeley-tags = {mri,ree,ruby},
title = {{Ruby Enterprise Edition 1.8.7-2012.02 released; End of Life imminent}},
url = {http://blog.phusion.nl/2012/02/21/ruby-enterprise-edition-1-8-7-2012-02-released-end-of-life-imminent/},
urldate = {13/05/12},
year = {2012}
}
@misc{Holman2011,
abstract = {Build features fast. Ship them. That's what we try to do at GitHub. Our process is the anti-process: what's the minimum overhead we can put up with to keep our code quality high, all while building features *as quickly as possible*? It's not just features, either: faster development means happier developers.},
author = {Holman, Zach},
keywords = {git,lean},
mendeley-tags = {git,lean},
month = oct,
shorttitle = {holman11},
title = {{How GitHub Uses GitHub to Build GitHub}},
url = {http://zachholman.com/talk/how-github-uses-github-to-build-github},
urldate = {2012-03-17},
year = {2011}
}
@misc{Libbery2011,
abstract = {The “Skinny controller; fat model” mantra so often repeated in the Rails community is only half-right. Most new Rails developers tend to try to stuff too much logic into controllers. That’s definitely true, and it’s definitely an anti-pattern. Skinny controllers are most certainly the way to go. Fat models, however, should also be considered an anti-pattern. This is something you learn pretty quickly when you start working on a Rails app of any appreciable size: models can get unwieldy very quickly.},
annote = {the skinny controller; fat model mantra so often repeated in the rails community is only half-right. most new rails developers tend to try to stuff too much},
author = {Libbery, Burke},
booktitle = {Quality on Rails},
file = {::},
keywords = {mvc,rails,refactoring,ruby},
mendeley-tags = {mvc,rails,ruby},
title = {{“Skinny Controller; Fat Model” is misleading}},
url = {http://qualityonrails.com/archives/33},
urldate = {06/05/12},
year = {2011}
}
@misc{ChiliProjectWhyFork,
author = {{Přisp\v{e}vatel\'{e} ChiliProject}},
booktitle = {ChiliProject Wiki},
file = {::},
keywords = {bug,chiliproject,fork,issue,redmine,tracker},
mendeley-tags = {chiliproject,fork,redmine},
title = {{Why Fork?}},
url = {https://www.chiliproject.org/projects/chiliproject/wiki/Why\_Fork?version=11},
urldate = {15/05/12},
year = {2011}
}
@misc{Keys2011,
annote = {
        

      },
author = {Keys, Adam},
booktitle = {The Real Adam},
file = {::},
keywords = {metaprogramming,ruby},
mendeley-tags = {metaprogramming,ruby},
title = {{Why metaprogram when you can program?}},
url = {http://weblog.therealadam.com/2011/12/09/why-metaprogram-when-you-can-program/},
urldate = {06/05/12},
year = {2011}
}
@misc{TracRedMine,
author = {{Přisp\v{e}vatel\'{e} Trac}},
booktitle = {Trac Wiki},
file = {::},
title = {{RedMine}},
url = {http://trac.edgewall.org/wiki/RedMine?version=4},
urldate = {14/05/12},
year = {2011}
}
@misc{WikipediaNestedSet,
author = {{Přisp\v{e}vatel\'{e} Wikipedie}},
booktitle = {Wikipedia, The Free Encyclopedia.},
keywords = {database,rdbms,tree},
language = {en},
mendeley-tags = {rdbms,tree},
publisher = {Wikimedia Foundation},
title = {{Nested set model}},
url = {http://en.wikipedia.org/w/index.php?title=Nested\_set\_model\&oldid=487109605},
urldate = {08/05/12},
year = {2012}
}
@book{Olsen2011,
address = {Upper Saddle River NJ},
author = {Olsen, Russ},
file = {::},
isbn = {9780321584106},
keywords = {ruby},
mendeley-tags = {ruby},
publisher = {Addison-Wesley},
title = {{Eloquent Ruby}},
year = {2011}
}
@misc{Stewart2001,
annote = {an interview with yukihiro matz  matsumoto, about ruby, and his new book, ruby in a nutshell.},
author = {Stewart, Bruce},
booktitle = {O'Reilly Media},
file = {::},
title = {{An Interview with the Creator of Ruby}},
url = {http://linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html},
urldate = {15/05/12},
year = {2001}
}
@misc{McCallister2004,
author = {McCallister, Brian},
booktitle = {Brian's Waste of Time},
file = {::},
keywords = {mvc},
mendeley-tags = {mvc},
title = {{MVC, Model 2, Java WebApps, (and callcc, why not) }},
url = {http://kasparov.skife.org/blog/src/java/mvc.html},
urldate = {07/05/12},
year = {2004}
}
@misc{Matsumoto2012,
address = {Boston, MA},
author = {Matsumoto, Yukihiro},
keywords = {ruby},
mendeley-tags = {ruby},
month = mar,
title = {{How Emacs changed my life}},
url = {http://www.slideshare.net/yukihiro\_matz/how-emacs-changed-my-life},
year = {2012}
}
@misc{MozillaDevProcess,
author = {Mozilla},
file = {::},
title = {{Mozilla Firefox: Development Process}},
url = {http://mozilla.github.com/process-releases/draft/development\_overview/},
urldate = {15/05/12},
year = {2011}
}
@misc{Kinsella2011,
annote = {
        

      },
author = {Kinsella, Jack},
booktitle = {Jack Kinsella - Rails Developer London},
file = {::},
keywords = {rails,tdd},
mendeley-tags = {rails,tdd},
title = {{Why Bother With Cucumber Testing?}},
url = {http://www.jackkinsella.ie/2011/09/26/why-bother-with-cucumber-testing.html},
urldate = {11/05/12},
year = {2011}
}
@misc{Parsons2011,
author = {Parsons, Chris},
file = {::},
keywords = {bdd,code,craftsmanship,cucumber,rails,tdd},
mendeley-tags = {rails,tdd},
title = {{Your tests are lying to you}},
url = {http://chrismdp.github.com/2011/10/your-tests-are-lying-to-you/},
urldate = {12/05/12},
year = {2011}
}
@book{Chelimsky2010,
address = {Lewisville Tex.},
author = {Chelimsky, David},
isbn = {9781934356371},
keywords = {ruby,tdd},
mendeley-tags = {ruby,tdd},
publisher = {Pragmatic},
title = {{The RSpec Book: Behaviour-Driven Development with RSpec, Cucumber, and Friends}},
year = {2010}
}
@misc{BenVinegar2007,
abstract = {[\ldots] When Rails sees a column named ‘type’ for models that aren’t immediate children of ActiveRecord::Base, it assumes that column holds the class name associated with your model. This is how Rails implements single table inheritance, and if that’s not what you intended, you’ve got a little extra work ahead of you.},
author = {Vinegar, Ben},
keywords = {rails},
mendeley-tags = {rails},
month = jan,
shorttitle = {vinegar07},
title = {{Legacy Rails - beware of 'type' columns}},
url = {http://benv.ca/2007/1/16/legacy-rails-beware-of-type-columns/ http://apidock.com/rails/v2.3.8/ActiveRecord/Base/inheritance\_column/class},
urldate = {2012-04-17},
year = {2007}
}
@misc{T.J.Schuck2012,
abstract = {We're thrilled to announce that all of our apps have been upgraded from REE to Ruby 1.9.3. We wanted to share some notes about what went well, what went wrong, and what we learned in the process.},
author = {Schuck, T.J.},
keywords = {rails,ruby},
mendeley-tags = {rails,ruby},
month = apr,
title = {{Lessons Learned Upgrading Harvest to Ruby 1.9.3}},
url = {http://techtime.getharvest.com/blog/harvest-is-now-on-ruby-1-dot-9-3},
year = {2012}
}
@misc{HanssonTestingTSA,
author = {Hansson, David Heinemeier},
month = apr,
title = {{Testing like the TSA}},
url = {http://37signals.com/svn/posts/3159-testing-like-the-tsa},
urldate = {2012-04-25},
year = {2012}
}
@misc{FowlerMocks,
abstract = {The term 'Mock Objects' has become a popular one to describe special case objects that mimic real objects for testing. Most language environments now have frameworks that make it easy to create mock objects. What's often not realized, however, is that mock objects are but one form of special case test object, one that enables a different style of testing. In this article I'll explain how mock objects work, how they encourage testing based on behavior verification, and how the community around them uses them to develop a different style of testing.},
author = {Fowler, Martin},
file = {::},
keywords = {tdd,testing},
mendeley-tags = {tdd},
title = {{Mocks Aren't Stubs}},
url = {http://martinfowler.com/articles/mocksArentStubs.html},
urldate = {12/05/12},
year = {2007}
}
@misc{Buck2006,
annote = {
        

      },
author = {Buck, Jamis},
booktitle = {the \{ buckblogs :here \}},
file = {::},
keywords = {mvc,rails},
mendeley-tags = {mvc,rails},
title = {{Skinny Controller, Fat Model}},
url = {http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model},
urldate = {08/05/12},
year = {2006}
}
@book{Fried2009,
author = {Fried, Jason and Hansson, David Heinemeier and Linderman, Matthew},
file = {::},
isbn = {0578012812},
pages = {194},
publisher = {37signals},
title = {{Getting Real: The smarter, faster, easier way to build a successful web application}},
url = {http://gettingreal.37signals.com/toc.php},
year = {2009}
}
@misc{Cook2008,
abstract = {The traditional bug triage process is miserably inefficient. Over my decade in this industry, I’ve spent months of my life sitting in windowless offices manually reviewing (and re-reviewing) thousands of bugs. Often times, there are three or four folks on the triage team, typically the most skilled people on the team, sitting about and bickering for hours over the finer points of obscure bugs. Politics, boredom and arbitrary decisions are unfortunately common. The result is wasted time and poorly managed bugs. So we came up with a better way. User Pain is a technique I’ve been using for many releases across multiple teams. It involves sorting bugs on a single unified scale called User Pain that takes into account common bug ranking criteria. I’ve found that it can reduce the cost of triage, help teams ship on time and greatly clarify which bugs you should be fixing right now. This essay describes how User Pain works and some best practices for implementing it on your team.},
author = {Cook, Daniel},
keywords = {bugtracker},
language = {English},
mendeley-tags = {bugtracker},
month = may,
shorttitle = {cook08},
title = {{Improving Bug Triage with User Pain}},
url = {http://www.lostgarden.com/2008/05/improving-bug-triage-with-user-pain.html},
urldate = {2012-03-18},
year = {2008}
}
